package com.nndmove.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MovieGenresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieGenresAllPropertiesEquals(MovieGenres expected, MovieGenres actual) {
        assertMovieGenresAutoGeneratedPropertiesEquals(expected, actual);
        assertMovieGenresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieGenresAllUpdatablePropertiesEquals(MovieGenres expected, MovieGenres actual) {
        assertMovieGenresUpdatableFieldsEquals(expected, actual);
        assertMovieGenresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieGenresAutoGeneratedPropertiesEquals(MovieGenres expected, MovieGenres actual) {
        assertThat(expected)
            .as("Verify MovieGenres auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieGenresUpdatableFieldsEquals(MovieGenres expected, MovieGenres actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieGenresUpdatableRelationshipsEquals(MovieGenres expected, MovieGenres actual) {
        assertThat(expected)
            .as("Verify MovieGenres relationships")
            .satisfies(e -> assertThat(e.getMovie()).as("check movie").isEqualTo(actual.getMovie()))
            .satisfies(e -> assertThat(e.getGenres()).as("check genres").isEqualTo(actual.getGenres()));
    }
}
