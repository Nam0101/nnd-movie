package com.nndmove.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryAllPropertiesEquals(History expected, History actual) {
        assertHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryAllUpdatablePropertiesEquals(History expected, History actual) {
        assertHistoryUpdatableFieldsEquals(expected, actual);
        assertHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryAutoGeneratedPropertiesEquals(History expected, History actual) {
        assertThat(expected)
            .as("Verify History auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryUpdatableFieldsEquals(History expected, History actual) {
        assertThat(expected)
            .as("Verify History relevant properties")
            .satisfies(e -> assertThat(e.getPart()).as("check part").isEqualTo(actual.getPart()))
            .satisfies(e -> assertThat(e.getStopTime()).as("check stopTime").isEqualTo(actual.getStopTime()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistoryUpdatableRelationshipsEquals(History expected, History actual) {
        assertThat(expected)
            .as("Verify History relationships")
            .satisfies(e -> assertThat(e.getMovie()).as("check movie").isEqualTo(actual.getMovie()));
    }
}
