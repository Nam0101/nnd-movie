package com.nndmove.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MovieResourceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieResourceAllPropertiesEquals(MovieResource expected, MovieResource actual) {
        assertMovieResourceAutoGeneratedPropertiesEquals(expected, actual);
        assertMovieResourceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieResourceAllUpdatablePropertiesEquals(MovieResource expected, MovieResource actual) {
        assertMovieResourceUpdatableFieldsEquals(expected, actual);
        assertMovieResourceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieResourceAutoGeneratedPropertiesEquals(MovieResource expected, MovieResource actual) {
        assertThat(expected)
            .as("Verify MovieResource auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieResourceUpdatableFieldsEquals(MovieResource expected, MovieResource actual) {
        assertThat(expected)
            .as("Verify MovieResource relevant properties")
            .satisfies(e -> assertThat(e.getPart()).as("check part").isEqualTo(actual.getPart()))
            .satisfies(e -> assertThat(e.getLinkEmbed()).as("check linkEmbed").isEqualTo(actual.getLinkEmbed()))
            .satisfies(e -> assertThat(e.getLinkM3u8()).as("check linkM3u8").isEqualTo(actual.getLinkM3u8()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMovieResourceUpdatableRelationshipsEquals(MovieResource expected, MovieResource actual) {
        assertThat(expected)
            .as("Verify MovieResource relationships")
            .satisfies(e -> assertThat(e.getMovie()).as("check movie").isEqualTo(actual.getMovie()));
    }
}
